//TOTS-Exercicis-Ll1.4-Versio-Final.txt


/*Nivell 1 - Exercici 1
Crea una funció que, en executar-la, escrigui una frase en un fitxer.*/

const fs = require('fs');

const conti = 'Hola, sóc un fitxer de text on un Script de Node.js hi emmagatzemarà aquest informació';
//Afegim una segona cadena de text al mateix fitxer:
//Afegim un paràgraf:
let lyrics = '\nBut still I\'m having memories of high speeds when the cops crashed\n' + 
             'As I laugh, pushin the gas while my Glocks blast\n' + 
             'We was young and we was dumb but we had heart';

const ruta='dades'
const nom_fitx='test.txt';

function escriureFitx(fitx){
  fs.writeFile(fitx,conti+lyrics, err => {
    if (err) {
      console.error(err);
    }
    console.log('Fitxer modificat amb èxit!!!');
  });
}
escriureFitx(`${ruta}/${nom_fitx}`);


/*Nivell 1 - Exercici 2
Crea una altra funció que mostri per consola el contingut del fitxer de l'exercici anterior. */

const fs = require('fs');
const ruta='dades'
const nom_fitx='test.txt';
//Manera 1 - Us objectes del File system
function llegirFitx(fitx){
fs.readFile(fitx, 'utf8', (err, data) => {
  if (err) {
    console.error(err);
  }
    console.log(data);
    return
});
}
llegirFitx(`${ruta}/${nom_fitx}`);

//Manera 2 -Síncrona
function llegirFitx2(fitx){
        let fileContent = fs.readFileSync(fitx, 'utf8');
        console.log(fileContent); 
      }
llegirFitx2(`${ruta}/${nom_fitx}`);

//Manera 3 - Asincrona
async function llegirtFitx3(fitx) {
  let fileContent = await fs.promises.readFile(fitx, { encoding: "utf-8" });
  console.log(fileContent);
}
llegirtFitx3(`${ruta}/${nom_fitx}`, "utf-8")
.catch((error) => console.log(error));  


/*Nivell 1 -- Exercici 3
Crea una funció que comprimeixi el fitxer del nivell 1.
Comprimir fitxer amb zlib.js*/

var zlib = require('zlib');
var fs = require('fs');
var zip = zlib.createGzip();

let dir='dades';
let nom_fitx='test.txt';

function comprimirFitx(ruta){
  fs.access(ruta, fs.F_OK, (err) => {
    if (err) {
             console.error(err)
             console.error("Fitxer NO existent. Introduieix un nom de fitxer vàlid, si us plau!");
             return
    }else{
        var read = fs.createReadStream(`${ruta}`);
        var write = fs.createWriteStream(`${dir}/fitx_comprimit.gz`);
        read.pipe(zip).pipe(write);	
        console.log("Fitxer comprimit!!!");		
    }
    });
}
let ruta=dir+'/'+nom_fitx;
comprimirFitx(ruta);


// Nivell2 

/*Nivell 2 - Exercici 1
Crea una funció que imprimeixi recursivament un missatge per la consola amb demores d'un segon.*/

function crida_recursiva(){
    setTimeout(() => {    
        console.log("Cacones!!!");
        crida_recursiva();
    }, 1000);
}
crida_recursiva();


/* Nivell2 - Exercici 2
Crea una funció que llisti per la consola el contingut del directori d'usuari/ària 
de l'ordinador utilizant Node Child Processes. */

const path = require('path');
const fs = require('fs');
let ruta='dades';
const directoryPath = path.join(__dirname, ruta);

//Manera 1
function llistaDir(dirPath){
  fs.readdir(dirPath, function (err, files) {
    if (err) {
        return console.log('Unable to scan directory: ' + err);
    } 
    files.forEach(function (file) {
        console.log(file); 
    });
});
}
llistaDir(directoryPath);

//Manera 2 - Executant ordre del sistema i variable d'entorn $HOME 
const { exec } = require('child_process');
function llistaDirUser() {
    exec('ls -l $HOME', (error, stdout, stderr) => {
        if (error) {
            console.error(`Error: ${error.message}`);
            return;
        }
        if (stderr) {
            console.error(`stderr: ${stderr}`);
            return;
        }
        console.log(stdout);
    });
}
llistaDirUser();

//Nivell 3

/* Nivell 3 - Exercici 1
A) Crea una funció que creï dos fitxers codificats en hexadecimal i en base64 respectivament, 
a partir del fitxer del nivell 1.
B) Crea una funció que guardi els fitxers del punt anterior, ara encriptats amb l'algoritme aes-192-cbc, 
i esborri els fitxers inicials.
C) Crea una altra funció que desencripti i descodifiqui els fitxers de l'apartat anterior 
tornant a generar una còpia de l'inicial.
Inclou un README amb instruccions per a l'execució de cada part. */

const fs = require('fs');
var nodeBase64 = require('nodejs-base64-converter');
const crypto = require("crypto");
const algorithm = 'aes-192-cbc';
const iv = crypto.randomBytes(16); //initVector

const ruta='dades';
const nom_fitx='test.txt';

function llegirFitx(fitx){
        let fileContent = fs.readFileSync(fitx, 'utf8');
        return fileContent;
      }

function escriure_fitxer(path_fitx,dades,tipus){
    fs.writeFile(path_fitx,dades, err => {
        if (err) {
          console.error(err);
        }
        console.log(`Fitxer tipus ${tipus} creat amb èxit!!!`);
      });
}

function eliminar_fitxer(path_fitx){
fs.unlink(path_fitx, function (err) {            
    if (err) {                                                 
        console.error(err);
        console.log('File Not Found!');                                    
    }else{
        console.log('File Deleted Successfuly!');      
    }                                                                      
});
}
    //CODIFICAR A HEXADECIMAL I BASE64 i DESCODIFICACIÓ
    let dades = llegirFitx(`${ruta}/${nom_fitx}`);
    const convert = (from, to) => str => Buffer.from(str, from).toString(to);
    const utf8ToHex = convert('utf8', 'hex');
    const hexToUtf8 = convert('hex', 'utf8');

    let cadena_hex = utf8ToHex(dades);
    escriure_fitxer(`${ruta}/fitxer.hex`, cadena_hex, 'hexa');

    let data64 = nodeBase64.encode(dades);  
    escriure_fitxer(`${ruta}/fitxer.base64`,data64, 'Base64');

//B) Encriptació 
const key = '123456789024681234567890';
const password = 'bncaskdbvasbvlaslslasfhj';

function criptoFitx(text,tipus) {
           let cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);
            let encrypted = cipher.update(text);            
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            let encryptedData = encrypted.toString('hex');
            if (tipus === 'hexa') escriure_fitxer(`${ruta}/fitxer_${tipus}.aes`, encryptedData, 'hexa');
            if (tipus === 'base64') escriure_fitxer(`${ruta}/fitxer_${tipus}.aes`, encryptedData, 'Base64');
            return { iv: iv.toString('hex'), encryptedData: encrypted.toString('hex') };
}
//C) Desencriptació  dels fitxers encriptats 
function decrypt(text) {
    let iv = Buffer.from(text.iv, 'hex');
    let encryptedText = Buffer.from(text.encryptedData, 'hex');
    let decipher = crypto.createDecipheriv(algorithm, Buffer.from(key), iv);
    let decrypted = decipher.update(encryptedText);
    decrypted = Buffer.concat([decrypted, decipher.final()]);
    let sortida = decrypted.toString();
    return decrypted.toString();
}

//B) Generació dels fitxers encriptats
let outputHexa = criptoFitx(cadena_hex,'hexa');
let outputBase64 = criptoFitx(data64,'base64');
//B) Eliminació de fitxers
eliminar_fitxer(`${ruta}/fitxer.hex`);
eliminar_fitxer(`${ruta}/fitxer.base64`);

//C) Desencriptació dels fitxers encriptats
let hexDecrypted = decrypt(outputHexa);
let base64Decrypted = decrypt(outputBase64);

//C) Descodificar els fitxers Hexa i Base64 /Generar fitxers finalsenformat texte/Eliminar fitxers encriptats .aes
//let decodedHex = hexToUtf8(cadena_hex);
let decodedHex = hexToUtf8(hexDecrypted);
escriure_fitxer(`${ruta}/fitxer_original-hex.txt`,decodedHex, 'text');

let decodedBase64 = nodeBase64.decode(base64Decrypted);
escriure_fitxer(`${ruta}/fitxer_original-base64.txt`,decodedBase64, 'text');

eliminar_fitxer(`${ruta}/fitxer_hexa.aes`);
eliminar_fitxer(`${ruta}/fitxer_base64.aes`);




const Cryptify = require('cryptify');
const crypto = require("crypto");
const iv = crypto.randomBytes(16);

//Font d'inspiració: https://www.educative.io/answers/what-is-cryptocreatedecipherivalgorithm-key-iv-options

// Initializing the algorithm
const algorithm = 'aes-192-cbc';

const dades = 'Hola, sóc un fitxer de text on un Script de Node.js hi emmagatzemarà aquest informació.'
//const dades = 'But still I\'m having memories of high speeds when the cops crashed. As I laugh, pushin the gas while my Glocks blast. We was young and we was dumb but we had heart';
//const dades = '72fca60f48f19e772a79c6abed5aa9a8c926c018c515bbc85281b70e13fecac2852dfa5477af245c1a215d68418ee34c34fe2156f73c288f58fe52a483f6328abd31914e3c39e4b5fc6ce935948733b85a0b8235e8c20ac0cbbafbfd783fa0ef2b8aed818591fe22043a69353ab5013f84787eb866e2fee875f7c7747595f8cdbff4cf7ef7c25a21c5d0305e3c1c75e07d996743baa0b55e007f2980bd0eff4497c810713bd2370102de67a3d9feda8443695cdc2d1b3bca0d6497b753357efcd671303368052314482b24863b67857303d9ca3ee925d19bbaf36afd9bbc3e2f093e5d1aca0c0a5934b04c55ad8d4a9d238e600a31da092338a508244332c43577e1af97acd4f6d5fcc0ec5fa360d3f753b2bf939587dff6fc2b98e46e98b7f1c8b15cf08fe36c9fce58a5f3cf2e5a8b4c4ea16670423275530e012bb74484c61949943532069f1390a34715777814a5d17a4bd8344b56ea7c133177867f59da9d8193c3aed78bff2487262b1b201dbb1c30927f9fc285d067eec89a7cf3a88f041dc75133d1d95059c25bc4deea815ada35cf627ab4ce5b17477301ac5335c194711dae96beefdcec7d094dcb2f956105bb51af8b998f0d6ec7f125b9fc5c4351987c3bf44dc0ceb898eb4988c2985d483ab9e8b4228a720e8fe20f4514d17f65cf0880df9d5054ee380e478348f3cd16105750ae5477bbc2e8dec13a69a7cd';

const ruta='dades';
const nom_fitx='test.txt';

// Initializing the key
//const key = crypto.scryptSync(password, 'TutorialsPoint' , 24);

const filePath=`${ruta}/${nom_fitx}`;
console.log(filePath);

//const password = process.env.ENV_SECRET_KEY;
const key = '123456789024681234567890';
const password = 'bncaskdbvasbvlaslslasfhj';

// An encrypt function
// Creating Cipheriv with its parameter
// Updating text
// Using concatenation
// Returning iv and encrypted data
function encrypt(text) {
            let cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);
            let encrypted = cipher.update(text);            
            encrypted = Buffer.concat([encrypted, cipher.final()]);
            let encryptedData = encrypted.toString('hex');
            console.log(encryptedData);
            return { iv: iv.toString('hex'), encryptedData: encrypted.toString('hex') };
    }
    
    // A decrypt function
    function decrypt(text) {
            let iv = Buffer.from(text.iv, 'hex');
            let encryptedText = Buffer.from(text.encryptedData, 'hex');
            
            // Creating Decipher
            let decipher = crypto.createDecipheriv(algorithm, Buffer.from(key), iv);
            
            // Updating encrypted text
            let decrypted = decipher.update(encryptedText);
            decrypted = Buffer.concat([decrypted, decipher.final()]);
            
            // returns data after decryption
            return decrypted.toString();
    }
    
    // Encrypts output
    var output = encrypt(dades);
    //console.log(output);

    // Decrypts output
    console.log(decrypt(output));


// Prova de code-decode-hex

const convert = (from, to) => str => Buffer.from(str, from).toString(to);
const utf8ToHex = convert('utf8', 'hex');
const hexToUtf8 = convert('hex', 'utf8');

console.log(hexToUtf8(utf8ToHex('dailyfile.host')) === 'dailyfile.host');
let textToHex = utf8ToHex('Cacca de la Vacca');
console.log(textToHex);
let hextToText = hexToUtf8(textToHex);
console.log(hextToText);




