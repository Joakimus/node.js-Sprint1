/*Lliurament SPRINT1 - 1.3 Exercici 1.1
Crea una funció que retorni una Promise que invoqui la funció resolve() o reject() que rep. 
Invoca-la passant-li les dues funcions de manera que imprimeixin un missatge diferent,
depenent de si la Promise es resol o no.  */


//Exemple1:  amb un delay (Timeout de 2 segons)  


function retornaPromesa() {
  return new Promise( (resolve, reject) => {
    setTimeout(() => {
      let totCorrecte = true;
      //let totCorrecte = false;
      if (totCorrecte) {
        resolve('Tutto bene.Tutto a posto!');
      } else {
        reject('Cacca de la Vacca!!!');
      }
    }, 2000)
  });
}


retornaPromesa()
  .then( resposta => console.log(resposta) )
  .catch( error => console.log(error) )


  
  //Exemple2 
// Funcion que recibe un callback para un valor aleatorio de 0-100 y
function valorAleatorio(callback) {
  const valor = Math.random() * 100;


  callback(Math.round(valor));
}


valorAleatorio((valor) => {
  console.log('Valor', valor);
});


function valorAleatorioPromesa() {
  const promise = new Promise((resolve, reject) => {
    valorAleatorio((valor) => {
      if (valor < 60) {
        reject('Valor menor a 60');
      } else {
        resolve(valor);  
      }
    });
  });


  return promise;
}


valorAleatorioPromesa()
  .then((valor) => {
    console.log('Valor promesa', valor);
  })
  .catch((error) => {
    console.log('Error capturado => ', error);
  });


/*Exercici 1.2
Crea una arrow function que rebi un paràmetre i una funció callback 
i li passi a la funció un missatge o un altre (que s'imprimirà per consola) 
en funció del paràmetre rebut.*/


//Funció que permet introduir una edat i comprova si és Major d'edat o menor d'edat


const comprovaEdat = (edat, retorna) => {
    console.log(`Valor de l\'edat ${edat}`);
    retorna(edat);
}
const retorn = (edat) => {
    if (edat >= 18 && edat >0) {
        console.log(`Tens ${edat} Ets MAJOR d\'edat`)
    } else if (edat < 18 && edat >0) {
        console.log(`Tens ${edat} Ets menor d\'edat`);
    }else {
        console.log('ERROR! Valor erroni. Edat no possible');
    }
}
//COmprovacions
comprovaEdat(18, retorn);
comprovaEdat(17, retorn);
comprovaEdat(0, retorn);

//Sprint1 - Lliurament 1.3 - Exercicis 2.1,2.2,2.3,3.1
//Donats els objectes employees i salaries, crea una arrow function getEmployee()
//que retorni una Promise efectuant la cerca en l'objecte pel seu id.
let employees = [
  {
    id: 1,
    name: 'Linux Torvalds',
  },
  {
    id: 2,
    name: 'Bill Gates',
  },
  {
    id: 3,
    name: 'Jeff Bezos',
  },
];

let salaries = [
  {
    id: 1,
    salary: 4000,
  },
  {
    id: 2,
    salary: 1000,
  },
  {
    id: 3,
    salary: 2000,
  },
];

const getEmployee = (ID) => {
  return new Promise((resolve, reject) => {
    if (typeof ID != 'number') {
      console.log('El valor del ID ha de ser numèric!!!');
    }
    const employee = employees.find((employee) => employee.id == ID);
    if (employee) {
      resolve(employee);
    } else {
      reject(`ERROR! L\'empleat ${ID} no existeix`);
    }
  });
};
//CRIDES A LA FUNCIÓ-COMPROVACIONS
getEmployee(1)
  .then((employee) => console.log(employee))
  .catch((error) => console.log(error));
getEmployee(2)
  .then((employee) => console.log(employee))
  .catch((error) => console.log(error));
getEmployee(3)
  .then((employee) => console.log(employee))
  .catch((error) => console.log(error));
//Proves errònies
getEmployee(7)
  .then((employee) => console.log(employee))
  .catch((error) => console.log(error));
getEmployee(0)
  .then((employee) => console.log(employee))
  .catch((error) => console.log(error));
getEmployee(-1)
  .then((employee) => console.log(employee))
  .catch((error) => console.log(error));

const getSalari = (employee) => {
  const ID = employee.id;
  return new Promise((resolve, reject) => {
    if (typeof ID != 'number') {
      console.log('El valor del ID ha de ser numèric!!!');
    }
    const salari = salaries.find((objSalari) => objSalari.id == ID);
    if (salari) {
      resolve(salari);
    } else {
      reject(`ERROR! L\'empleat ${ID} no existeix'}`);
    }
  });
};

getEmployee(1)
.then((employee) =>  getSalari(employee).then((SalaryObj) => console.log(`${employee.name} té salari de: ${SalaryObj.salary}`))
.catch((error) => console.log(error)));
getEmployee(2).then((employee) =>
  getSalari(employee).then((SalaryObj) => console.log(`${employee.name} té salari de: ${SalaryObj.salary}`))
  .catch((error) => console.log(error)));
getEmployee(3).then((employee) =>
  getSalari(employee).then((SalaryObj) => console.log(`${employee.name} té salari de: ${SalaryObj.salary}`))
  .catch((error) => console.log(error)));

//Proves errònies (que cerquen informació d'suauris que NO existeixen:
getEmployee(7)
.then((employee) => getSalari(employee)
.then((SalaryObj) => console.log(`${employee.name} té salari de: ${SalaryObj.salary}`)))
.catch((error) => console.log(error));

getEmployee(0)
.then((employee) => getSalari(employee)
.then((SalaryObj) => console.log(`${employee.name} té salari de: ${SalaryObj.salary}`)))
.catch((error) => console.log(error));

Exercici 2.3

// DONCS, SENSE SABER-HO, JA HO HE FET AIXÍ A l'Exercici2  (Anterior)

Exercici 3.1

// DONCS, SENSE SABER-HO, JA HO HE FET AIXÍ A l'Exercici2  (Anterior)